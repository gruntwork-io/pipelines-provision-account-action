name: Bootstrap a new account in access-control repo
description: "Sets up a new AWS account and basic roles inside the access control repo"
inputs:
  terragrunt_command:
    description: "The name of the configured deploy branch"
    required: false
    default: main
  new_account_name:
    description: ""
    required: true
  branch:
    description: ""
    required: true
  gruntwork_code_access_token:
    description: ""
    required: true

runs:
  using: composite
  steps:
    # - name: "[ProvisionAccount]: Setup access-control PR"
    #   id: provision_access_control
    #   uses: gruntwork-io-team/pipelines-setup-access-control@main
    #   with:
    #     new_account_name: ${{ inputs.new_account_name }}

    - name: "[ProvisionAccount]: Read account request"
      id: account_request
      uses: gruntwork-io-team/pipelines-bootstrap@main
      # Only try this if we've actually created the account
      with:
        new_account_name: ${{ inputs.new_account_name }}
        terragrunt_command: ${{ inputs.terragrunt_command }}
        branch: ${{ inputs.branch }}

    - name: "[ProvisionAccount]: Get requesting PR number"
      id: get_pr_number
      shell: bash
      if:  ${{ inputs.terragrunt_command == 'apply' }}
      env:
        COMMIT_SHA: ${{ inputs.branch }}
        GH_TOKEN: ${{ inputs.gruntwork_code_access_token }}
        REPO: ${{ github.repository }}
      run: |
        PR_NUMBER=$(gh -R "$REPO" pr list --search "$COMMIT_SHA" --state merged --json number -q '.[0].number')
        echo "The PR number is: $PR_NUMBER"
        echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT

    - name: "[ProvisionAccount]: Check out terraform-aws-control-tower repo"
      if: ${{ inputs.terragrunt_command == 'apply' }}
      uses: actions/checkout@v4
      with:
        repository: gruntwork-io/terraform-aws-control-tower
        token: ${{ inputs.gruntwork_code_access_token }}
        path: terraform-aws-control-tower
        ref: ${{ env.CONTROL_TOWER_MODULES_VERSION }}

    - name: "[ProvisionAccount]: Install boilerplate"
      if:  ${{ inputs.terragrunt_command == 'apply' }}
      shell: bash
      env:
        GITHUB_OAUTH_TOKEN: ${{ inputs.gruntwork_code_access_token }}
      run: |
        curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/main/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "$GRUNTWORK_INSTALLER_VERSION"
        gruntwork-install --binary-name boilerplate --repo https://github.com/gruntwork-io/boilerplate --tag "$BOILERPLATE_VERSION"

    - name: "[ProvisionAccount]: Run boilerplate to generate code"
      if:  ${{ inputs.terragrunt_command == 'apply' }}
      shell: bash
      env:
        ACCOUNT_NAME: ${{ inputs.new_account_name }}
        AWS_REGION: ${{ steps.account_request.outputs.aws_region }}
        ORG_NAME_PREFIX: ${{ steps.account_request.outputs.org_name_prefix }}
        ACCOUNT_BASELINE_MODULES_VERSION: ${{ steps.account_request.outputs.account_baseline_modules_version }}
        ACCOUNT_BASELINE_CIS_SERVICE_CATALOG_VERSION: ${{ steps.account_request.outputs.account_baseline_cis_service_catalog_version }}
        REQUESTING_TEAM_NAME: ${{ steps.account_request.outputs.requesting_team_name }}
        DEFAULT_TAGS: ${{ steps.account_request.outputs.default_tags }}
        CREATE_VPC: ${{ steps.account_request.outputs.create_vpc  }}
      run: |
        boilerplate \
          --template-url "./terraform-aws-control-tower//templates/landingzone/boilerplate-single-account-baseline" \
          --output-folder . \
          --var AccountName="$ACCOUNT_NAME" \
          --var AwsRegion="$AWS_REGION" \
          --var OrgNamePrefix="$ORG_NAME_PREFIX" \
          --var AccountBaselineModulesVersion="$ACCOUNT_BASELINE_MODULES_VERSION" \
          --var AccountBaselineCISServiceCatalogVersion="$ACCOUNT_BASELINE_CIS_SERVICE_CATALOG_VERSION" \
          --var RequestingTeamName="$REQUESTING_TEAM_NAME" \
          --var DefaultTags="$DEFAULT_TAGS" \
          --var CreateVPC="$CREATE_VPC" \
          --var VpcModuleVersion="$ACCOUNT_BASELINE_CIS_SERVICE_CATALOG_VERSION" \
          --non-interactive

    - name: "[ProvisionAccount]: Remove Control Tower Repo"
      shell: bash
      if:  ${{ inputs.terragrunt_command == 'apply' }}
      run: rm -rf terraform-aws-control-tower

    - name: "[ProvisionAccount]: Create Pull Request"
      if:  ${{ inputs.terragrunt_command == 'apply' }}
      id: create_pr
      uses: peter-evans/create-pull-request@v6
      with:
        base: main
        token: ${{ inputs.gruntwork_code_access_token }}
        branch: "enhancement/baseline-account-${{ inputs.new_account_name }}"
        commit-message: "Generate account baseline for: ${{ inputs.new_account_name }}"
        title: "Generate account baseline for: ${{ inputs.new_account_name }}"
        body: |
          This pull request applies an account baseline to the **${{ inputs.new_account_name }}** AWS account, which was created in https://github.com/${{ github.repository }}/pull/${{ steps.get_pr_number.outputs.pr_number }} using Gruntwork Landing Zone. To **apply** this baseline, do the following:

            1. Inspect the details in this pull request and confirm correctness.
            2. Merge this pull request.

          Once merged, Gruntwork Pipelines will `terragrunt apply` the baseline in the newly created AWS account.
